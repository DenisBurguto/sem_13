# –ó–∞–¥–∞–Ω–∏–µ No5
# üìå –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á–∏ 3 –∏ 4. –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ –∫–ª–∞—Å—Å –ø—Ä–æ–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–∏ÃÜ –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã:
# üìå –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (—Ñ—É–Ω–∫—Ü–∏—è –∏–∑ –∑–∞–¥–∞–Ω–∏—è 4)
# üìå –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É - —Ç—Ä–µ–±—É–µ—Ç —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ
# –∏—Å–ø–æ–ª—å–∑—É–∏ÃÜ—Ç–µ –º–∞–≥–∏—á–µ—Å–∫–∏–∏ÃÜ –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–∏ÃÜ. –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –≤—ã–∑—ã–≤–∞–∏ÃÜ—Ç–µ
# –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞. –ê –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –ø–æ–ª—É—á–∏—Ç–µ –µ–≥–æ —É—Ä–æ–≤–µ–Ω—å –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–∏ÃÜ.
# üìå –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω—å—à–µ, —á–µ–º –≤–∞—à —É—Ä–æ–≤–µ–Ω—å, –≤—ã–∑—ã–≤–∞–∏ÃÜ—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞.
import json
from sem_13.task_4 import create_users_list, MyUser
from sem_13.task_3 import AccessError, LevelError, UserIdError


class MyProject:
    """class works with json file to read and write users authorisation data
    can check permissions of user, can add new users

    """

    def __init__(self, json_file: str = 'user.json'):
        self.users = create_users_list(json_file)
        self.access_level = 0
        self.system_access = False
        print(f"current system status is {'activated' if self.system_access else 'deactivated'}")
        print(f'current users list containing {len(self.users)} users.')

    def enter_to_system(self, name, user_id):
        match = False
        log_user = MyUser(name, user_id)
        if not self.users:
            log_user.access_level = self.access_level
            self.add_user(log_user)
            self.system_access = True
            print(f"current system status is activated by  {log_user}")
            return MyUser(name, user_id).access_level
        for user in self.users:
            if user == log_user:
                match = True
                self.access_level = user.access_level
        if not match:
            raise AccessError(name, user_id)
        self.system_access = True
        print(f"current system status is activated by  {log_user}")
        return self.access_level

    def add_user(self, user: MyUser):
        if int(user.access_level) < int(self.access_level):
            raise LevelError(self.access_level, user.access_level)
        for authorized in self.users:
            if authorized.user_id == user.user_id:
                raise UserIdError(user.user_id)
        self.users.append(user)
        self.from_users_list_to_json()

    def from_users_list_to_json(self, json_file: str = 'user.json'):
        out_dict = {}
        for user in self.users:
            if not out_dict.get(user.access_level):
                pairs = {user.user_id: user.name}
                out_dict[user.access_level] = pairs
            else:
                out_dict.get(user.access_level)[user.user_id] = user.name
        with open(json_file, 'w', encoding='utf-8') as out:
            json.dump(out_dict, out, indent=2)


if __name__ == '__main__':
    new = MyProject()
    new.enter_to_system('den', '0',)
    print(new.access_level)
    test_user_4 = MyUser('test4', '9', '3')
    new.add_user(test_user_4)
    test_user = MyUser('test', '8')


    new.add_user(test_user)
    new.enter_to_system('test', '8')
    print(new.access_level)

    # new.add_user(MyUser('df5', '17', '7'))
